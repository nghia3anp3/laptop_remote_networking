package com.nghia.networking_server;


import java.awt.AWTException;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.concurrent.TimeUnit;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        setLocationRelativeTo(null);
        Color white;
        getContentPane().setBackground(Color.white);                
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("Kết Nối");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("IP máy chủ:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addGap(15, 15, 15))
        );

        String IP = null;
        try {
            IP = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        jLabel3.setText(IP);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //===========================================================================================================================================
    public String receiveSignal(String s){
        try {
            s = Program.inFromClient.readLine();
        } 
        catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return s;
    }
    //===========================================================================================================================================
    public static String xulichuoi(String s){
        char kyTu;
        String fix="";
        for (int i = 0; i < s.length(); i++) {
        kyTu = s.charAt(i);
            if (Character.isSpace(kyTu)==false || Character.isSpace(s.charAt(i+1))==false)  {
                fix = fix + kyTu;
            }
        }
        return fix;
    }
    //=========================================================================================================================================== 
    public static int demchuoi() throws IOException{
        int size = 0;
        int k =0;
        Process process = Runtime.getRuntime().exec("tasklist.exe");
        Scanner scanner = new Scanner(new InputStreamReader(process.getInputStream()));
        while (scanner.hasNext())
        {
            //String temp = xulichuoi(scanner.nextLine());
            if (k>=0){
            String temp = scanner.nextLine();
            size++;
        }
        else
        {
                scanner.nextLine();
                k++;
                size++;
        }
        }
        scanner.close();
        return size-3;
    }
    //==========================================================================================================================================
    public static int demchuoi_application() throws IOException{
        int k = 0;
        Process process = Runtime.getRuntime().exec("powershell.exe Get-Process | Select MainWindowTitle,Id");
        Scanner scanner = new Scanner(new InputStreamReader(process.getInputStream()));
            while (scanner.hasNext()) {
                //String temp = xulichuoi(scanner.nextLine());
                if (k>=0){
                String temp = scanner.nextLine().trim();
                if (demtu(temp)!=1){
                k++;
                }
            }
                else {
                    scanner.nextLine();
                }
            }
        scanner.close();
        return k-3;
        }
    //==========================================================================================================================================
    public static int demtu(String s){
            StringTokenizer stringTokenizer = new StringTokenizer(s);
            int soTuTrongChuoi = stringTokenizer.countTokens();
            return soTuTrongChuoi;
    }
    //==========================================================================================================================================
    public void shutdown() throws IOException
    {
        String s = Program.inFromClient.readLine();
        try{
            Runtime runtime = Runtime.getRuntime();
            Process proc = runtime.exec("shutdown -s -t "+s);
            System.exit(0);
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    //===========================================================================================================================================
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Boolean test = true;   
    //===========================================================================================================================================
        try {
            Program.client = new ServerSocket(6060);
            System.out.println("Server started");   
            System.out.println("Waiting for a client ...");
            Program.server = Program.client.accept();
            if (Program.client == null){
                JOptionPane.showMessageDialog(rootPane, "Không thể kết nối");
                return;
            }
            else{
                System.out.println("Client accepted");
            }
            Program.inFromClient = new BufferedReader(new InputStreamReader(Program.server.getInputStream()));
            Program.outToClient = new PrintWriter(Program.server.getOutputStream());
        } 
        catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
    //===========================================================================================================================================    
        String s = "";
        while(test)
        {
            s = receiveSignal(s);
            switch (s) {              
                case "SHUTDOWN":
                {
                    try {
                        shutdown();
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
    //===========================================================================================================================================                        
                case "DISCONNECT":  
                {
                    try {
                        Program.client.close();
                        test = false;
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
    //=========================================================================================================================================== 
               case "TAKE":                    
                    try
                    {
                    Robot r = new Robot();
                    Program.ous = new ByteArrayOutputStream();
                    //String path = "E://Java//Screenshot//tmp.jpg";
                    Rectangle capture = new Rectangle(0,0,(int) Toolkit.getDefaultToolkit().getScreenSize().getWidth(), (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight());
                    BufferedImage Image = r.createScreenCapture(capture);
                    ImageIO.write(Image, "png", Program.ous);
                    byte[] bytes = Program.ous.toByteArray();
                    Program.ImgOut = new ObjectOutputStream(Program.server.getOutputStream());
                    Program.ImgOut.writeObject(bytes);
                    Program.ImgOut.flush(); 
                    }
                    catch(AWTException | IOException ex){
                        JOptionPane.showMessageDialog(null, ex);
                    }
                    break;
    //===========================================================================================================================================   
                case "XEM":
                String temp;
                int dodai = 0;
                try {
                    dodai = demchuoi();
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
                String size = Integer.toString(dodai);
                Program.outToClient.println(size);
                Program.outToClient.flush();
                int k = 0;
                Process process = null;
                try {
                    process = Runtime.getRuntime().exec("tasklist.exe");
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
                Scanner scanner = new Scanner(new InputStreamReader(process.getInputStream()));
                while (scanner.hasNext()) 
                {
                //String temp = xulichuoi(scanner.nextLine());
                    if (k>=4)
                    {
                    temp = scanner.nextLine();
                    temp = xulichuoi(temp).trim();
                    //String[] data = temp.split(" ");
                    //int dodai = data.length;
                    Program.outToClient.println(temp);
                    Program.outToClient.flush();
                    //System.out.println(temp); 
                    k++;
                    }
                    else 
                    {
                        scanner.nextLine();
                        k++;
                    }
                }
                scanner.close();
                break;
    //===========================================================================================================================================                   //===========================================================================================================================================               
                case "KILLID":
                    String pid = ""; 
                    
                    try {
                        pid = Program.inFromClient.readLine();
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    boolean test2 = false;
                    
                    if (pid!="")
                    {
                        String cmd = "taskkill /F /PID " + pid;
                    try {
                        Runtime.getRuntime().exec(cmd);
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    test2 = true;
                    }
                    
                    if (!test2)
                    {
                        JOptionPane.showMessageDialog(rootPane, "Lỗi xảy ra");
                    }
                    break;
    //===========================================================================================================================================                   //===========================================================================================================================================                   //===========================================================================================================================================                   //===========================================================================================================================================               
                case "XEM_APPLICATION":
                {
                    int k2 = 0;
                    int stop = 0;
                    try {
                        stop = demchuoi_application();
                        Program.outToClient.println(Integer.toString(stop));
                        Program.outToClient.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    int count = 0;
                    Process process2 = null;
                    try {
                        process2 = Runtime.getRuntime().exec("powershell.exe Get-Process | Select MainWindowTitle,Id");
                    } catch (IOException ex) {
                        Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    Scanner scanner2 = new Scanner(new InputStreamReader(process2.getInputStream()));
                    while (scanner2.hasNext()) {
                        //String temp = xulichuoi(scanner.nextLine());
                        if (k2>=3 && count!=stop){
                            String temp2 = scanner2.nextLine().trim();
                            if (demtu(temp2)!=1){
                                Program.outToClient.println(temp2);
                                Program.outToClient.flush();
                                count++;
                            }
                        }
                        else {
                            scanner2.nextLine();
                            k2++;
                        }
                    }
                    scanner2.close();                    
                break;
                }

    //===========================================================================================================================================   
                case "START":
                {
                try {
                    String tmp = Program.inFromClient.readLine();
                    Runtime.getRuntime().exec("powershell.exe Start-Process "+tmp);
                } catch (IOException ex) {
                    Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
                }
    //===========================================================================================================================================                               
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
